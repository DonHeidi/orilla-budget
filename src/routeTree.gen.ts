/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PortalRouteImport } from './routes/portal'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardTimeEntriesRouteImport } from './routes/dashboard/time-entries'
import { Route as DashboardProjectsRouteImport } from './routes/dashboard/projects'
import { Route as DashboardOrgsRouteImport } from './routes/dashboard/_orgs'
import { Route as DashboardTimeEntriesIdRouteImport } from './routes/dashboard/time-entries.$id'
import { Route as DashboardProjectsIdRouteImport } from './routes/dashboard/projects.$id'
import { Route as DashboardOrgsOrganisationsRouteImport } from './routes/dashboard/_orgs.organisations'
import { Route as DashboardOrgsAccountsRouteImport } from './routes/dashboard/_orgs.accounts'
import { Route as DashboardOrgsOrganisationsIdRouteImport } from './routes/dashboard/_orgs.organisations.$id'
import { Route as DashboardOrgsAccountsIdRouteImport } from './routes/dashboard/_orgs.accounts.$id'

const PortalRoute = PortalRouteImport.update({
  id: '/portal',
  path: '/portal',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardTimeEntriesRoute = DashboardTimeEntriesRouteImport.update({
  id: '/time-entries',
  path: '/time-entries',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardProjectsRoute = DashboardProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardOrgsRoute = DashboardOrgsRouteImport.update({
  id: '/_orgs',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardTimeEntriesIdRoute = DashboardTimeEntriesIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => DashboardTimeEntriesRoute,
} as any)
const DashboardProjectsIdRoute = DashboardProjectsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => DashboardProjectsRoute,
} as any)
const DashboardOrgsOrganisationsRoute =
  DashboardOrgsOrganisationsRouteImport.update({
    id: '/organisations',
    path: '/organisations',
    getParentRoute: () => DashboardOrgsRoute,
  } as any)
const DashboardOrgsAccountsRoute = DashboardOrgsAccountsRouteImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => DashboardOrgsRoute,
} as any)
const DashboardOrgsOrganisationsIdRoute =
  DashboardOrgsOrganisationsIdRouteImport.update({
    id: '/$id',
    path: '/$id',
    getParentRoute: () => DashboardOrgsOrganisationsRoute,
  } as any)
const DashboardOrgsAccountsIdRoute = DashboardOrgsAccountsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => DashboardOrgsAccountsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardOrgsRouteWithChildren
  '/portal': typeof PortalRoute
  '/dashboard/projects': typeof DashboardProjectsRouteWithChildren
  '/dashboard/time-entries': typeof DashboardTimeEntriesRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/accounts': typeof DashboardOrgsAccountsRouteWithChildren
  '/dashboard/organisations': typeof DashboardOrgsOrganisationsRouteWithChildren
  '/dashboard/projects/$id': typeof DashboardProjectsIdRoute
  '/dashboard/time-entries/$id': typeof DashboardTimeEntriesIdRoute
  '/dashboard/accounts/$id': typeof DashboardOrgsAccountsIdRoute
  '/dashboard/organisations/$id': typeof DashboardOrgsOrganisationsIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/portal': typeof PortalRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/projects': typeof DashboardProjectsRouteWithChildren
  '/dashboard/time-entries': typeof DashboardTimeEntriesRouteWithChildren
  '/dashboard/accounts': typeof DashboardOrgsAccountsRouteWithChildren
  '/dashboard/organisations': typeof DashboardOrgsOrganisationsRouteWithChildren
  '/dashboard/projects/$id': typeof DashboardProjectsIdRoute
  '/dashboard/time-entries/$id': typeof DashboardTimeEntriesIdRoute
  '/dashboard/accounts/$id': typeof DashboardOrgsAccountsIdRoute
  '/dashboard/organisations/$id': typeof DashboardOrgsOrganisationsIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/portal': typeof PortalRoute
  '/dashboard/_orgs': typeof DashboardOrgsRouteWithChildren
  '/dashboard/projects': typeof DashboardProjectsRouteWithChildren
  '/dashboard/time-entries': typeof DashboardTimeEntriesRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/_orgs/accounts': typeof DashboardOrgsAccountsRouteWithChildren
  '/dashboard/_orgs/organisations': typeof DashboardOrgsOrganisationsRouteWithChildren
  '/dashboard/projects/$id': typeof DashboardProjectsIdRoute
  '/dashboard/time-entries/$id': typeof DashboardTimeEntriesIdRoute
  '/dashboard/_orgs/accounts/$id': typeof DashboardOrgsAccountsIdRoute
  '/dashboard/_orgs/organisations/$id': typeof DashboardOrgsOrganisationsIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/portal'
    | '/dashboard/projects'
    | '/dashboard/time-entries'
    | '/dashboard/'
    | '/dashboard/accounts'
    | '/dashboard/organisations'
    | '/dashboard/projects/$id'
    | '/dashboard/time-entries/$id'
    | '/dashboard/accounts/$id'
    | '/dashboard/organisations/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/portal'
    | '/dashboard'
    | '/dashboard/projects'
    | '/dashboard/time-entries'
    | '/dashboard/accounts'
    | '/dashboard/organisations'
    | '/dashboard/projects/$id'
    | '/dashboard/time-entries/$id'
    | '/dashboard/accounts/$id'
    | '/dashboard/organisations/$id'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/portal'
    | '/dashboard/_orgs'
    | '/dashboard/projects'
    | '/dashboard/time-entries'
    | '/dashboard/'
    | '/dashboard/_orgs/accounts'
    | '/dashboard/_orgs/organisations'
    | '/dashboard/projects/$id'
    | '/dashboard/time-entries/$id'
    | '/dashboard/_orgs/accounts/$id'
    | '/dashboard/_orgs/organisations/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  PortalRoute: typeof PortalRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/portal': {
      id: '/portal'
      path: '/portal'
      fullPath: '/portal'
      preLoaderRoute: typeof PortalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/time-entries': {
      id: '/dashboard/time-entries'
      path: '/time-entries'
      fullPath: '/dashboard/time-entries'
      preLoaderRoute: typeof DashboardTimeEntriesRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/projects': {
      id: '/dashboard/projects'
      path: '/projects'
      fullPath: '/dashboard/projects'
      preLoaderRoute: typeof DashboardProjectsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/_orgs': {
      id: '/dashboard/_orgs'
      path: ''
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardOrgsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/time-entries/$id': {
      id: '/dashboard/time-entries/$id'
      path: '/$id'
      fullPath: '/dashboard/time-entries/$id'
      preLoaderRoute: typeof DashboardTimeEntriesIdRouteImport
      parentRoute: typeof DashboardTimeEntriesRoute
    }
    '/dashboard/projects/$id': {
      id: '/dashboard/projects/$id'
      path: '/$id'
      fullPath: '/dashboard/projects/$id'
      preLoaderRoute: typeof DashboardProjectsIdRouteImport
      parentRoute: typeof DashboardProjectsRoute
    }
    '/dashboard/_orgs/organisations': {
      id: '/dashboard/_orgs/organisations'
      path: '/organisations'
      fullPath: '/dashboard/organisations'
      preLoaderRoute: typeof DashboardOrgsOrganisationsRouteImport
      parentRoute: typeof DashboardOrgsRoute
    }
    '/dashboard/_orgs/accounts': {
      id: '/dashboard/_orgs/accounts'
      path: '/accounts'
      fullPath: '/dashboard/accounts'
      preLoaderRoute: typeof DashboardOrgsAccountsRouteImport
      parentRoute: typeof DashboardOrgsRoute
    }
    '/dashboard/_orgs/organisations/$id': {
      id: '/dashboard/_orgs/organisations/$id'
      path: '/$id'
      fullPath: '/dashboard/organisations/$id'
      preLoaderRoute: typeof DashboardOrgsOrganisationsIdRouteImport
      parentRoute: typeof DashboardOrgsOrganisationsRoute
    }
    '/dashboard/_orgs/accounts/$id': {
      id: '/dashboard/_orgs/accounts/$id'
      path: '/$id'
      fullPath: '/dashboard/accounts/$id'
      preLoaderRoute: typeof DashboardOrgsAccountsIdRouteImport
      parentRoute: typeof DashboardOrgsAccountsRoute
    }
  }
}

interface DashboardOrgsAccountsRouteChildren {
  DashboardOrgsAccountsIdRoute: typeof DashboardOrgsAccountsIdRoute
}

const DashboardOrgsAccountsRouteChildren: DashboardOrgsAccountsRouteChildren = {
  DashboardOrgsAccountsIdRoute: DashboardOrgsAccountsIdRoute,
}

const DashboardOrgsAccountsRouteWithChildren =
  DashboardOrgsAccountsRoute._addFileChildren(
    DashboardOrgsAccountsRouteChildren,
  )

interface DashboardOrgsOrganisationsRouteChildren {
  DashboardOrgsOrganisationsIdRoute: typeof DashboardOrgsOrganisationsIdRoute
}

const DashboardOrgsOrganisationsRouteChildren: DashboardOrgsOrganisationsRouteChildren =
  {
    DashboardOrgsOrganisationsIdRoute: DashboardOrgsOrganisationsIdRoute,
  }

const DashboardOrgsOrganisationsRouteWithChildren =
  DashboardOrgsOrganisationsRoute._addFileChildren(
    DashboardOrgsOrganisationsRouteChildren,
  )

interface DashboardOrgsRouteChildren {
  DashboardOrgsAccountsRoute: typeof DashboardOrgsAccountsRouteWithChildren
  DashboardOrgsOrganisationsRoute: typeof DashboardOrgsOrganisationsRouteWithChildren
}

const DashboardOrgsRouteChildren: DashboardOrgsRouteChildren = {
  DashboardOrgsAccountsRoute: DashboardOrgsAccountsRouteWithChildren,
  DashboardOrgsOrganisationsRoute: DashboardOrgsOrganisationsRouteWithChildren,
}

const DashboardOrgsRouteWithChildren = DashboardOrgsRoute._addFileChildren(
  DashboardOrgsRouteChildren,
)

interface DashboardProjectsRouteChildren {
  DashboardProjectsIdRoute: typeof DashboardProjectsIdRoute
}

const DashboardProjectsRouteChildren: DashboardProjectsRouteChildren = {
  DashboardProjectsIdRoute: DashboardProjectsIdRoute,
}

const DashboardProjectsRouteWithChildren =
  DashboardProjectsRoute._addFileChildren(DashboardProjectsRouteChildren)

interface DashboardTimeEntriesRouteChildren {
  DashboardTimeEntriesIdRoute: typeof DashboardTimeEntriesIdRoute
}

const DashboardTimeEntriesRouteChildren: DashboardTimeEntriesRouteChildren = {
  DashboardTimeEntriesIdRoute: DashboardTimeEntriesIdRoute,
}

const DashboardTimeEntriesRouteWithChildren =
  DashboardTimeEntriesRoute._addFileChildren(DashboardTimeEntriesRouteChildren)

interface DashboardRouteChildren {
  DashboardOrgsRoute: typeof DashboardOrgsRouteWithChildren
  DashboardProjectsRoute: typeof DashboardProjectsRouteWithChildren
  DashboardTimeEntriesRoute: typeof DashboardTimeEntriesRouteWithChildren
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardOrgsRoute: DashboardOrgsRouteWithChildren,
  DashboardProjectsRoute: DashboardProjectsRouteWithChildren,
  DashboardTimeEntriesRoute: DashboardTimeEntriesRouteWithChildren,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  PortalRoute: PortalRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
