/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PortalRouteImport } from './routes/portal'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminTimeEntriesRouteImport } from './routes/admin/time-entries'
import { Route as AdminOrganisationsRouteImport } from './routes/admin/organisations'
import { Route as AdminTimeEntriesIdRouteImport } from './routes/admin/time-entries.$id'
import { Route as AdminOrganisationsIdRouteImport } from './routes/admin/organisations.$id'

const PortalRoute = PortalRouteImport.update({
  id: '/portal',
  path: '/portal',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminTimeEntriesRoute = AdminTimeEntriesRouteImport.update({
  id: '/time-entries',
  path: '/time-entries',
  getParentRoute: () => AdminRoute,
} as any)
const AdminOrganisationsRoute = AdminOrganisationsRouteImport.update({
  id: '/organisations',
  path: '/organisations',
  getParentRoute: () => AdminRoute,
} as any)
const AdminTimeEntriesIdRoute = AdminTimeEntriesIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AdminTimeEntriesRoute,
} as any)
const AdminOrganisationsIdRoute = AdminOrganisationsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AdminOrganisationsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/portal': typeof PortalRoute
  '/admin/organisations': typeof AdminOrganisationsRouteWithChildren
  '/admin/time-entries': typeof AdminTimeEntriesRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/admin/organisations/$id': typeof AdminOrganisationsIdRoute
  '/admin/time-entries/$id': typeof AdminTimeEntriesIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/portal': typeof PortalRoute
  '/admin/organisations': typeof AdminOrganisationsRouteWithChildren
  '/admin/time-entries': typeof AdminTimeEntriesRouteWithChildren
  '/admin': typeof AdminIndexRoute
  '/admin/organisations/$id': typeof AdminOrganisationsIdRoute
  '/admin/time-entries/$id': typeof AdminTimeEntriesIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/portal': typeof PortalRoute
  '/admin/organisations': typeof AdminOrganisationsRouteWithChildren
  '/admin/time-entries': typeof AdminTimeEntriesRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/admin/organisations/$id': typeof AdminOrganisationsIdRoute
  '/admin/time-entries/$id': typeof AdminTimeEntriesIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/portal'
    | '/admin/organisations'
    | '/admin/time-entries'
    | '/admin/'
    | '/admin/organisations/$id'
    | '/admin/time-entries/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/portal'
    | '/admin/organisations'
    | '/admin/time-entries'
    | '/admin'
    | '/admin/organisations/$id'
    | '/admin/time-entries/$id'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/portal'
    | '/admin/organisations'
    | '/admin/time-entries'
    | '/admin/'
    | '/admin/organisations/$id'
    | '/admin/time-entries/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  PortalRoute: typeof PortalRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/portal': {
      id: '/portal'
      path: '/portal'
      fullPath: '/portal'
      preLoaderRoute: typeof PortalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/time-entries': {
      id: '/admin/time-entries'
      path: '/time-entries'
      fullPath: '/admin/time-entries'
      preLoaderRoute: typeof AdminTimeEntriesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/organisations': {
      id: '/admin/organisations'
      path: '/organisations'
      fullPath: '/admin/organisations'
      preLoaderRoute: typeof AdminOrganisationsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/time-entries/$id': {
      id: '/admin/time-entries/$id'
      path: '/$id'
      fullPath: '/admin/time-entries/$id'
      preLoaderRoute: typeof AdminTimeEntriesIdRouteImport
      parentRoute: typeof AdminTimeEntriesRoute
    }
    '/admin/organisations/$id': {
      id: '/admin/organisations/$id'
      path: '/$id'
      fullPath: '/admin/organisations/$id'
      preLoaderRoute: typeof AdminOrganisationsIdRouteImport
      parentRoute: typeof AdminOrganisationsRoute
    }
  }
}

interface AdminOrganisationsRouteChildren {
  AdminOrganisationsIdRoute: typeof AdminOrganisationsIdRoute
}

const AdminOrganisationsRouteChildren: AdminOrganisationsRouteChildren = {
  AdminOrganisationsIdRoute: AdminOrganisationsIdRoute,
}

const AdminOrganisationsRouteWithChildren =
  AdminOrganisationsRoute._addFileChildren(AdminOrganisationsRouteChildren)

interface AdminTimeEntriesRouteChildren {
  AdminTimeEntriesIdRoute: typeof AdminTimeEntriesIdRoute
}

const AdminTimeEntriesRouteChildren: AdminTimeEntriesRouteChildren = {
  AdminTimeEntriesIdRoute: AdminTimeEntriesIdRoute,
}

const AdminTimeEntriesRouteWithChildren =
  AdminTimeEntriesRoute._addFileChildren(AdminTimeEntriesRouteChildren)

interface AdminRouteChildren {
  AdminOrganisationsRoute: typeof AdminOrganisationsRouteWithChildren
  AdminTimeEntriesRoute: typeof AdminTimeEntriesRouteWithChildren
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminOrganisationsRoute: AdminOrganisationsRouteWithChildren,
  AdminTimeEntriesRoute: AdminTimeEntriesRouteWithChildren,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  PortalRoute: PortalRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
