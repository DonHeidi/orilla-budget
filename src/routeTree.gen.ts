/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PortalRouteImport } from './routes/portal'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardTimeEntriesRouteImport } from './routes/dashboard/time-entries'
import { Route as DashboardOrganisationsRouteImport } from './routes/dashboard/organisations'
import { Route as DashboardTimeEntriesIdRouteImport } from './routes/dashboard/time-entries.$id'
import { Route as DashboardOrganisationsIdRouteImport } from './routes/dashboard/organisations.$id'

const PortalRoute = PortalRouteImport.update({
  id: '/portal',
  path: '/portal',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardTimeEntriesRoute = DashboardTimeEntriesRouteImport.update({
  id: '/time-entries',
  path: '/time-entries',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardOrganisationsRoute = DashboardOrganisationsRouteImport.update({
  id: '/organisations',
  path: '/organisations',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardTimeEntriesIdRoute = DashboardTimeEntriesIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => DashboardTimeEntriesRoute,
} as any)
const DashboardOrganisationsIdRoute =
  DashboardOrganisationsIdRouteImport.update({
    id: '/$id',
    path: '/$id',
    getParentRoute: () => DashboardOrganisationsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/portal': typeof PortalRoute
  '/dashboard/organisations': typeof DashboardOrganisationsRouteWithChildren
  '/dashboard/time-entries': typeof DashboardTimeEntriesRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/organisations/$id': typeof DashboardOrganisationsIdRoute
  '/dashboard/time-entries/$id': typeof DashboardTimeEntriesIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/portal': typeof PortalRoute
  '/dashboard/organisations': typeof DashboardOrganisationsRouteWithChildren
  '/dashboard/time-entries': typeof DashboardTimeEntriesRouteWithChildren
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/organisations/$id': typeof DashboardOrganisationsIdRoute
  '/dashboard/time-entries/$id': typeof DashboardTimeEntriesIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/portal': typeof PortalRoute
  '/dashboard/organisations': typeof DashboardOrganisationsRouteWithChildren
  '/dashboard/time-entries': typeof DashboardTimeEntriesRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/organisations/$id': typeof DashboardOrganisationsIdRoute
  '/dashboard/time-entries/$id': typeof DashboardTimeEntriesIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/portal'
    | '/dashboard/organisations'
    | '/dashboard/time-entries'
    | '/dashboard/'
    | '/dashboard/organisations/$id'
    | '/dashboard/time-entries/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/portal'
    | '/dashboard/organisations'
    | '/dashboard/time-entries'
    | '/dashboard'
    | '/dashboard/organisations/$id'
    | '/dashboard/time-entries/$id'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/portal'
    | '/dashboard/organisations'
    | '/dashboard/time-entries'
    | '/dashboard/'
    | '/dashboard/organisations/$id'
    | '/dashboard/time-entries/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  PortalRoute: typeof PortalRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/portal': {
      id: '/portal'
      path: '/portal'
      fullPath: '/portal'
      preLoaderRoute: typeof PortalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/time-entries': {
      id: '/dashboard/time-entries'
      path: '/time-entries'
      fullPath: '/dashboard/time-entries'
      preLoaderRoute: typeof DashboardTimeEntriesRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/organisations': {
      id: '/dashboard/organisations'
      path: '/organisations'
      fullPath: '/dashboard/organisations'
      preLoaderRoute: typeof DashboardOrganisationsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/time-entries/$id': {
      id: '/dashboard/time-entries/$id'
      path: '/$id'
      fullPath: '/dashboard/time-entries/$id'
      preLoaderRoute: typeof DashboardTimeEntriesIdRouteImport
      parentRoute: typeof DashboardTimeEntriesRoute
    }
    '/dashboard/organisations/$id': {
      id: '/dashboard/organisations/$id'
      path: '/$id'
      fullPath: '/dashboard/organisations/$id'
      preLoaderRoute: typeof DashboardOrganisationsIdRouteImport
      parentRoute: typeof DashboardOrganisationsRoute
    }
  }
}

interface DashboardOrganisationsRouteChildren {
  DashboardOrganisationsIdRoute: typeof DashboardOrganisationsIdRoute
}

const DashboardOrganisationsRouteChildren: DashboardOrganisationsRouteChildren =
  {
    DashboardOrganisationsIdRoute: DashboardOrganisationsIdRoute,
  }

const DashboardOrganisationsRouteWithChildren =
  DashboardOrganisationsRoute._addFileChildren(
    DashboardOrganisationsRouteChildren,
  )

interface DashboardTimeEntriesRouteChildren {
  DashboardTimeEntriesIdRoute: typeof DashboardTimeEntriesIdRoute
}

const DashboardTimeEntriesRouteChildren: DashboardTimeEntriesRouteChildren = {
  DashboardTimeEntriesIdRoute: DashboardTimeEntriesIdRoute,
}

const DashboardTimeEntriesRouteWithChildren =
  DashboardTimeEntriesRoute._addFileChildren(DashboardTimeEntriesRouteChildren)

interface DashboardRouteChildren {
  DashboardOrganisationsRoute: typeof DashboardOrganisationsRouteWithChildren
  DashboardTimeEntriesRoute: typeof DashboardTimeEntriesRouteWithChildren
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardOrganisationsRoute: DashboardOrganisationsRouteWithChildren,
  DashboardTimeEntriesRoute: DashboardTimeEntriesRouteWithChildren,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  PortalRoute: PortalRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
